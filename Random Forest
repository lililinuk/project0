from finlab.ml import fundamental_features
import finlab.ml as ml
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import matplotlib.pyplot as plt
from finlab.data import Data

dataset = fundamental_features()
print(dataset.shape)
dataset = dataset.dropna(thresh = int(len(dataset)*0.6), axis = 1)
dataset = dataset.dropna(how = 'any')
#check how many rows are preserved
print(dataset.shape)

features = dataset.columns
# add returns to the dataframe
ml.add_profit_prediction(dataset)
dataset = dataset.dropna()


# split the data
select = dataset.index.get_level_values('date')< '2017'
dataset_train = dataset[select]
dataset_test = dataset[~select]
#training
cf = RandomForestClassifier(n_estimators = 100)
cf.fit(dataset_train[features], dataset_train['return']>1)

prediction = cf.predict(dataset_test[features])

plt.style.use('ggplot')
%matplotlib inline
returns1 = dataset_test['return'][ prediction == True ]
dates = returns1.index.get_level_values('date')
returns1.groupby(dates).mean().cumprod().plot()

returns2 = dataset_test['return'][prediction  == False]
dates = returns2.index.get_level_values('date')
returns2.groupby(dates).mean().cumprod().plot()





# New Startegy using feature importance

importance = pd.Series(cf.feature_importances_, index = features).sort_values(ascending = False)
importance
data = Data()
close = data.get('收盤價')
SMA = close.rolling(60,min_periods = 10).mean()
bias = close / SMA 

ml.add_feature(dataset,'bias',bias)
items = list(importance.index[:20])
def select_stock(df) :
    rank = df[items].rank(pct=True).sum(axis = 1)
    condition1 = rank.rank(pct = True) > 0.9
    condition2 = df['bias'] > 1
    return df[condition1 & condition2]['return'].mean()


dates = dataset.index.get_level_values('date')
dataset.groupby(dates).apply(select_stock).cumprod().plot()
dataset['return'].groupby(dates).mean().cumprod().plot()
